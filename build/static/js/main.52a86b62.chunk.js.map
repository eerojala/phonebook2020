{"version":3,"sources":["Services/entries.js","Components/Input.js","Components/Form.js","Components/Notification.js","Components/Entry.js","Components/Phonebook.js","Components/App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Input","label","value","onChange","Form","handleNameChange","name","handleNumberChange","number","handleSubmit","onSubmit","type","Notification","message","inlineStyle","style","Entry","entry","handleDelete","onClick","Phonebook","entries","map","App","baseStyle","background","fontSize","borderStyle","borderRadius","padding","marginBottom","successStyle","color","errorStyle","useState","setEntries","newName","setNewName","newNumber","setNewNumber","filter","setFilter","notification","setNotification","notificationStyle","setNotificationStyle","useEffect","entryService","initialEntries","setNotificationTimeout","ms","setTimeout","updateEntry","changedEntry","console","log","updatedEntry","e","catch","error","deleteLocalOnlyEntry","deleteEntryFromLocal","filteredEntries","toLowerCase","includes","event","target","preventDefault","entryObject","existingEntry","find","undefined","returnedEntry","concat","window","confirm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52a86b62.chunk.js","sourcesContent":["import axios from 'axios'\r\n// const baseUrl = 'http://localhost:3001/api/entries' \r\nconst baseUrl = '/api/entries' // since we are a running a build verson of the front-end in the back-end, they both function in the same address, we can define the url as relative\r\n// NOTE: since we are using a relative adress, if we are running the front-end and back-end separately (during testing of front end), \r\n// we need to define a proxy in package.json. In this way the front-end will redirect all of the below requests to the adress defined in the proxy.\r\n// To enable the use of the proxy, add the line [\"proxy\": \"http://localhost:3001\"] to package.json (inside the primary brackets)\r\n\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  \r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject)\r\n\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React from 'react'\r\n\r\nconst Input = ({ label, value, onChange }) => (\r\n  <div>\r\n    {label} <input value={value} onChange={onChange} />\r\n  </div>\r\n)\r\n\r\nexport default Input","import React from 'react'\r\nimport Input from './Input'\r\n\r\nconst Form = ({ handleNameChange, name, handleNumberChange, number, handleSubmit }) => (\r\n  <div>\r\n    <form onSubmit={handleSubmit}>\r\n      <Input label=\"Name\" value={name} onChange={handleNameChange} />\r\n      <Input label=\"Number\" value={number} onChange={handleNumberChange} />\r\n      <button type=\"submit\">Add</button>\r\n    </form>\r\n  </div>\r\n)\r\n\r\nexport default Form","import React from 'react'\r\n\r\nconst Notification = ({ message,  inlineStyle }) => {\r\n  if ( message === null ) {\r\n    return null\r\n  }\r\n\r\n  return <div style={inlineStyle}>{message}</div>\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Entry = ({ entry, handleDelete }) => {\r\n  return (\r\n    <div>\r\n      {entry.name} {entry.number}\r\n      <button onClick={handleDelete}>Delete</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Entry","import React from 'react'\r\nimport Entry from './Entry'\r\n\r\nconst Phonebook = ({ entries, handleDelete }) => (\r\n  <div>\r\n    {entries.map((entry) => \r\n      <Entry key={entry.id} entry={entry} handleDelete={() => handleDelete(entry.id)} />\r\n    )}\r\n  </div>\r\n)\r\n\r\nexport default Phonebook","import React, { useState, useEffect } from 'react'\r\n\r\nimport entryService from '../Services/entries'\r\n\r\nimport Form from './Form'\r\nimport Input from './Input'\r\nimport Notification from './Notification'\r\nimport Phonebook from './Phonebook'\r\n\r\nconst App = () => {\r\n  const baseStyle = {\r\n    background: \"lightgrey\",\r\n    fontSize: 20,\r\n    borderStyle: \"solid\",\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10\r\n  }\r\n\r\n  const successStyle = {...baseStyle, color: \"green\"}\r\n  const errorStyle = {...baseStyle, color: \"red\"}\r\n\r\n  const [ entries, setEntries] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ filter, setFilter ] = useState('')\r\n  const [ notification, setNotification ] = useState(null)\r\n  const [ notificationStyle, setNotificationStyle ] = useState(baseStyle)\r\n\r\n  // const hook = () => {\r\n  //   axios\r\n  //     .get('http://localhost:3001/entries') \r\n  //     .then(response => { // after the data has been fetched from the above adress\r\n  //       // run this function\r\n  //       setEntries(response.data) \r\n  //     })\r\n  // }\r\n\r\n  // useEffect(hook, []) // second parameter's empty array means that this hooks only after the first render is done (not on subsequent renders)\r\n  // // so first the component is rendered without the entries\r\n  // // but after the entries are successfully fetched and the state is updated, the component is rerendered \r\n\r\n  const hook = () => {\r\n    entryService\r\n      .getAll()\r\n        .then(initialEntries => {\r\n          setEntries(initialEntries)\r\n        })\r\n  }\r\n\r\n  useEffect(hook, [])\r\n\r\n  const addEntry = (event) => {\r\n    event.preventDefault()\r\n    const entryObject = {\r\n      name: newName,\r\n      number: newNumber\r\n    }\r\n\r\n    const existingEntry = entries.find(e => e.name === newName)\r\n\r\n    if (existingEntry === undefined) {\r\n      entryService\r\n        .create(entryObject)\r\n        .then(returnedEntry => {\r\n          setEntries(entries.concat(returnedEntry))\r\n          setNotification(`Added ${newName}`)\r\n          setNotificationStyle(successStyle)\r\n          setNewName('')\r\n          setNewNumber('')\r\n          setNotificationTimeout(5000)\r\n        })\r\n        .catch(error => {\r\n          console.log(error.response.data)\r\n          setNotification(error.response.data.error)\r\n          setNotificationStyle(errorStyle)\r\n          setNotificationTimeout(8000)\r\n        })\r\n    } else {\r\n      if (window.confirm(`There already exists an entry with that name. Do you want to update it's number?`)) {\r\n        updateEntry(existingEntry)\r\n      }\r\n    }\r\n  }\r\n\r\n  const setNotificationTimeout = (ms) => {\r\n    setTimeout(() => { setNotification(null) }, ms) // After 5 seconds, the notification is nullified (so it does not render anymore)\r\n  }\r\n\r\n  const updateEntry = (entry) => {\r\n    const changedEntry = {...entry, number: newNumber}\r\n    console.log(changedEntry)\r\n    entryService\r\n      .update(changedEntry.id, changedEntry)\r\n      .then(updatedEntry => {\r\n        setEntries(entries.map(e => e.id !== updatedEntry.id ? e : updatedEntry))\r\n        setNewName('')\r\n        setNewNumber('')\r\n      })\r\n      .catch(error => {\r\n        deleteLocalOnlyEntry(changedEntry)\r\n      })\r\n  }\r\n\r\n  const deleteLocalOnlyEntry = (entry) => {\r\n    setNotification(`Entry ${entry.name} has already been deleted from the database`)\r\n    setNotificationStyle(errorStyle)\r\n    deleteEntryFromLocal(entry.id)\r\n    setNotificationTimeout(5000)\r\n  }\r\n\r\n  const deleteEntryFromLocal = (id) => {\r\n    setEntries(entries.filter(entry => entry.id !== id))\r\n  }\r\n\r\n  const deleteEntry = (id) => {\r\n    const entry = entries.find(entry => entry.id === id)\r\n\r\n    if (entry !== undefined) {\r\n      if (window.confirm(`Are you sure yo want to delete ${entry.name}?`)) {\r\n        entryService\r\n          .remove(id)\r\n          .then(response => {\r\n            deleteEntryFromLocal(id)\r\n          })\r\n          .catch(error => {\r\n            deleteLocalOnlyEntry(entry)\r\n          })\r\n      }\r\n    } \r\n  }  \r\n\r\n  const handleFilterChange = (event) => {\r\n    setFilter(event.target.value)\r\n  }\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n\r\n  const filteredEntries = entries.filter((entry) => entry.name.toLowerCase().includes(filter.toLowerCase()))\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={notification} inlineStyle={notificationStyle} />\r\n      <Input label=\"Filter shown with\" value={filter} onChange={handleFilterChange} />\r\n      <h2>Add a new entry</h2>\r\n      <Form \r\n        handleNameChange={handleNameChange} \r\n        name={newName} \r\n        handleNumberChange={handleNumberChange}\r\n        number={newNumber}\r\n        handleSubmit={addEntry} \r\n      />\r\n      <h2>Numbers</h2>\r\n      <Phonebook entries={filteredEntries} handleDelete={deleteEntry} />\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './Components/App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}